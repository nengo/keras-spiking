{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classifying Fashion MNIST with spiking activations\n",
    "\n",
    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/nengo/keras-spiking/blob/master/docs/examples/spiking-fashion-mnist.ipynb)\n",
    "\n",
    "This example is based on the [Basic image classification example in TensorFlow](https://www.tensorflow.org/tutorials/keras/classification). We would recommend beginning there if you would like a more basic introduction to how Keras works. In this example we will walk through how we can convert that non-spiking model into a spiking model using Keras Spiking, and various techniques that can be used to fine tune performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "import keras_spiking\n",
    "\n",
    "tf.random.set_seed(0)\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading data\n",
    "\n",
    "We'll begin by loading the Fashion MNIST data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(\n",
    "    (train_images, train_labels),\n",
    "    (test_images, test_labels),\n",
    ") = tf.keras.datasets.fashion_mnist.load_data()\n",
    "\n",
    "# normalize images so values are between 0 and 1\n",
    "train_images = train_images / 255.0\n",
    "test_images = test_images / 255.0\n",
    "\n",
    "class_names = [\n",
    "    \"T-shirt/top\",\n",
    "    \"Trouser\",\n",
    "    \"Pullover\",\n",
    "    \"Dress\",\n",
    "    \"Coat\",\n",
    "    \"Sandal\",\n",
    "    \"Shirt\",\n",
    "    \"Sneaker\",\n",
    "    \"Bag\",\n",
    "    \"Ankle boot\",\n",
    "]\n",
    "num_classes = len(class_names)\n",
    "\n",
    "plt.figure(figsize=(10, 10))\n",
    "for i in range(25):\n",
    "    plt.subplot(5, 5, i + 1)\n",
    "    plt.imshow(train_images[i], cmap=plt.cm.binary)\n",
    "    plt.axis(\"off\")\n",
    "    plt.title(class_names[train_labels[i]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Non-spiking model\n",
    "\n",
    "Next we'll build and train the non-spiking model (this is identical to the [original TensorFlow example](https://www.tensorflow.org/tutorials/keras/classification))."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = tf.keras.Sequential(\n",
    "    [\n",
    "        tf.keras.layers.Flatten(input_shape=(28, 28)),\n",
    "        tf.keras.layers.Dense(128, activation=\"relu\"),\n",
    "        tf.keras.layers.Dense(10),\n",
    "    ]\n",
    ")\n",
    "\n",
    "\n",
    "def train(input_model):\n",
    "    input_model.compile(\n",
    "        optimizer=\"adam\",\n",
    "        loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
    "        metrics=[\"accuracy\"],\n",
    "    )\n",
    "\n",
    "    input_model.fit(train_images, train_labels, epochs=10)\n",
    "\n",
    "    _, test_acc = input_model.evaluate(test_images, test_labels, verbose=2)\n",
    "\n",
    "    print(\"\\nTest accuracy:\", test_acc)\n",
    "\n",
    "\n",
    "train(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spiking model\n",
    "\n",
    "Next we will create an equivalent spiking model. There are two important changes here:\n",
    "\n",
    "1. Add a temporal dimension to the data/model.\n",
    "\n",
    "Spiking models always run over time (i.e., each forward pass through the model will run for some number of timesteps). This means that we need to add a temporal dimension to the data, so instead of having shape ``(batch_size, ...)`` it will have shape\n",
    "``(batch_size, n_steps, ...)``. For those familiar with working with RNNs, the principles are the same; a spiking neuron accepts temporal data and computes over time, just like an RNN.\n",
    "\n",
    "2. Replace any activation functions with ``keras_spiking.SpikingActivation``.\n",
    "\n",
    "``keras_spiking.SpikingActivation`` can encapsulate any activation function, and will produce an equivalent spiking implementation. Neurons will spike at a rate proportional to the output of the base activation function. For example, if the activation function is outputting a value of 10, then the wrapped ``SpikingActivation`` will output spikes at a rate of 10Hz (i.e., 10 spikes per 1 simulated second, where 1 simulated second is equivalent to some number of timesteps, determined by the ``dt`` parameter of ``SpikingActivation``).\n",
    "\n",
    "Note that for many layers, Keras combines the activation function into another layer. For example, ``tf.keras.layers.Dense(units=10, activation=\"relu\")`` is equivalent to ``tf.keras.layers.Dense(units=10) -> tf.keras.layers.Activation(\"relu\")``. Due to the temporal nature of ``SpikingActivation`` it cannot be directly used within another layer as in the first case; we need to explicitly separate it into its own layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# repeat the images for n_steps\n",
    "n_steps = 10\n",
    "train_images = np.tile(train_images[:, None], (1, n_steps, 1, 1))\n",
    "test_images = np.tile(test_images[:, None], (1, n_steps, 1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = tf.keras.Sequential(\n",
    "    [\n",
    "        # add temporal dimension to the input shape; we can set it to None,\n",
    "        # to allow the model to flexibly run for different lengths of time\n",
    "        tf.keras.layers.Reshape((-1, 28 * 28), input_shape=(None, 28, 28)),\n",
    "        # we can use Keras' TimeDistributed wrapper to allow the Dense layer\n",
    "        # to operate on temporal data\n",
    "        tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(128)),\n",
    "        # replace the \"relu\" activation in the non-spiking model with a\n",
    "        # spiking equivalent.\n",
    "        # we'll learn more about \"spiking aware training\" later on\n",
    "        keras_spiking.SpikingActivation(\"relu\", spiking_aware_training=False),\n",
    "        # we don't need TimeDistributed on this layer, because by default\n",
    "        # SpikingActivation (like all Keras RNNs) only returns the values\n",
    "        # from the last timestep. we could set return_sequences=True in\n",
    "        # SpikingActivation if we wanted data for all timesteps.\n",
    "        tf.keras.layers.Dense(10),\n",
    "    ]\n",
    ")\n",
    "\n",
    "# train the model, identically to the non-spiking version\n",
    "train(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that while the training accuracy is as good as we expect, the test accuracy is not. This is due to a unique feature of ``SpikingActivation``; it will automatically swap the behaviour of the spiking neurons during training. Because spiking neurons are (in general) not differentiable, we cannot directly use the spiking activation function during training. Instead, SpikingActivation will use the base (non-spiking) activation during training, and the spiking version during inference. So during training above we are seeing the performance of the non-spiking model, but during evaluation we are seeing the performance of the spiking model.\n",
    "\n",
    "So the question is, why is the performance of the spiking model so much worse than the non-spiking equivalent, and what can we do to fix that?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation time\n",
    "\n",
    "Let's visualize the output of the spiking model, to get a better sense of what is going on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_output(seq_model, **kwargs):\n",
    "    \"\"\"\n",
    "    This code is only used for plotting purposes, and isn't necessary to\n",
    "    understand the rest of this example; feel free to skip it\n",
    "    if you just want to see the results.\n",
    "    \"\"\"\n",
    "\n",
    "    # rebuild the model with the functional API, so that we can\n",
    "    # access the output of intermediate layers\n",
    "    inp = x = tf.keras.Input(batch_shape=seq_model.layers[0].input_shape)\n",
    "    for layer in seq_model.layers:\n",
    "        if isinstance(layer, (keras_spiking.SpikingActivation, keras_spiking.Lowpass)):\n",
    "            # set return_sequences=True so we can see all the spikes,\n",
    "            # and update any parameters specified in kwargs\n",
    "            cfg = layer.get_config()\n",
    "            cfg[\"return_sequences\"] = True\n",
    "            cfg.update(kwargs)\n",
    "            layer = type(layer)(**cfg)\n",
    "\n",
    "        if isinstance(layer, keras_spiking.SpikingActivation):\n",
    "            # save this layer so we can access it later\n",
    "            spike_layer = layer\n",
    "\n",
    "        x = layer(x)\n",
    "\n",
    "    func_model = tf.keras.Model(inp, [x, spike_layer.output])\n",
    "\n",
    "    # load the trained weights\n",
    "    func_model.set_weights(seq_model.get_weights())\n",
    "\n",
    "    # run model\n",
    "    output, spikes = func_model.predict(test_images)\n",
    "\n",
    "    # check test accuracy using output from last timestep\n",
    "    predictions = np.argmax(output[:, -1], axis=-1)\n",
    "    accuracy = np.equal(predictions, test_labels).mean()\n",
    "    print(\"Test accuracy: %.2f%%\" % (100 * accuracy))\n",
    "\n",
    "    n_spikes = spikes * spike_layer.dt\n",
    "    time = spike_layer.dt * test_images.shape[1]\n",
    "    rates = np.sum(n_spikes, axis=1) / time\n",
    "\n",
    "    print(\n",
    "        \"Spike rate per neuron (Hz): min=%.2f mean=%.2f max=%.2f\"\n",
    "        % (np.min(rates), np.mean(rates), np.max(rates))\n",
    "    )\n",
    "\n",
    "    # plot output\n",
    "    for ii in range(4):\n",
    "        plt.figure(figsize=(12, 4))\n",
    "\n",
    "        plt.subplot(1, 3, 1)\n",
    "        plt.title(class_names[test_labels[ii]])\n",
    "        plt.imshow(test_images[ii, 0], cmap=\"gray\")\n",
    "        plt.axis(\"off\")\n",
    "\n",
    "        plt.subplot(1, 3, 2)\n",
    "        plt.title(\"Spikes per neuron per timestep\")\n",
    "        plt.hist(np.ravel(n_spikes), bins=int(np.max(n_spikes)) + 1)\n",
    "        plt.xlabel(\"# of spikes\")\n",
    "        plt.ylabel(\"Frequency\")\n",
    "\n",
    "        plt.subplot(1, 3, 3)\n",
    "        plt.title(\"Output predictions\")\n",
    "        plt.plot(\n",
    "            np.arange(test_images.shape[1]) * spike_layer.dt, tf.nn.softmax(output[ii])\n",
    "        )\n",
    "        plt.legend(class_names, loc=\"upper left\")\n",
    "        plt.xlabel(\"Time (s)\")\n",
    "        plt.ylabel(\"Probability\")\n",
    "        plt.ylim([-0.05, 1.05])\n",
    "\n",
    "        plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_output(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see an immediate problem: the neurons are hardly spiking at all. The mean number of spikes we're getting out of each neuron in our SpikingActivation layer is much less than one, and as a result the output is mostly flat.\n",
    "\n",
    "To help understand why, we need to think more about the temporal nature of spiking neurons. Recall that the layer is set up such that if the base activation function were to be outputting a value of 1, the spiking equivalent would be spiking at 1Hz (i.e., emitting one spike per second). In the above example we are simulating for 10 timesteps, with the default ``dt`` of 0.001s, so we're simulating a total of 0.01s. If our neurons aren't spiking very rapidly, and we're only simulating for 0.01s, then it's not surprising that we aren't getting any spikes in that time window.\n",
    "\n",
    "We can increase the value of ``dt``, effectively running the spiking neurons for longer, in order to get a more accurate measure of the neuron's output. Basically this allows us to collect more spikes from each neuron, giving us a better estimate of the neuron's actual spike rate. We can see how the number of spikes and accuracy change as we increase ``dt``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dt=0.01 * 10 timesteps is equivalent to 0.1s of simulated time\n",
    "check_output(model, dt=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_output(model, dt=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_output(model, dt=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that as we increase `dt` the performance of the spiking model increasingly approaches the non-spiking performance. In addition, as `dt` increases, the number of spikes is increasing. To understand why this improves accuracy, keep in mind that although the simulated time is increasing, the actual number of timesteps is still 10 in all cases. We're effectively binning all the spikes that occur on each time step. So as our bin sizes get larger (increasing `dt`), the spike counts will more closely approximate the \"true\" output of the underlying non-spiking activation function.\n",
    "\n",
    "One might be tempted to simply increase `dt` to a very large value, and thereby always get great performance. But keep in mind that when we do that we have likely lost any of the advantages that were motivating us to investigate spiking models in the first place. For example, one prominent advantage of spiking models is temporal sparsity (we only need to communicate occasional spikes, rather than continuous values). However, with large `dt` the neurons are likely spiking every simulation time step (or multiple times per timestep), so the activity is no longer temporally sparse.\n",
    "\n",
    "Thus setting `dt` represents a trade-off between accuracy and temporal sparsity. Choosing the appropriate value will depend on the demands of your application."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spiking aware training\n",
    "\n",
    "As mentioned above, by default SpikingActivation layers will use the non-spiking activation function during training and the spiking version during inference. However, similar to the idea of [quantization aware training](https://www.tensorflow.org/model_optimization/guide/quantization/training), often we can improve performance by partially incorporating spiking behaviour during training. Specifically, we will use the spiking activation on the forward pass, while still using the non-spiking version on the backwards pass. This allows the model to learn weights that account for the discrete, temporal nature of the spiking activities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = tf.keras.Sequential(\n",
    "    [\n",
    "        tf.keras.layers.Reshape((-1, 28 * 28), input_shape=(None, 28, 28)),\n",
    "        tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(128)),\n",
    "        # set spiking_aware training and a moderate dt\n",
    "        keras_spiking.SpikingActivation(\"relu\", dt=0.1, spiking_aware_training=True),\n",
    "        tf.keras.layers.Dense(10),\n",
    "    ]\n",
    ")\n",
    "\n",
    "train(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_output(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that with ``spiking_aware_training`` we're getting better performance than we were with the equivalent `dt` value above. The model has learned weights that are less sensitive to the discrete, sparse output produced by the spiking neurons."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spike rate regularization\n",
    "\n",
    "As we saw in the [Simulation time section](#Simulation-time), the spiking rate of the neurons is very important. If a neuron is spiking too slowly then we don't have enough information to determine its output value. Conversely, if a neuron is spiking too quickly then we may lose the spiking advantages we are looking for, such as temporal sparsity.\n",
    "\n",
    "Thus it can be helpful to more directly control the firing rates in the model by applying regularization penalties during training. Any of the standard Keras regularization functions can be used. Keras Spiking also includes some additional regularizers that can be useful for this case as they allow us to specify a non-zero reference point (so we can drive the activities towards some value greater than zero)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = tf.keras.Sequential(\n",
    "    [\n",
    "        tf.keras.layers.Reshape((-1, 28 * 28), input_shape=(None, 28, 28)),\n",
    "        tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(128)),\n",
    "        keras_spiking.SpikingActivation(\n",
    "            \"relu\",\n",
    "            dt=0.1,\n",
    "            spiking_aware_training=True,\n",
    "            # add activity regularizer to encourage spike rates around 10Hz\n",
    "            activity_regularizer=keras_spiking.L2(l2=1e-3, target=10),\n",
    "        ),\n",
    "        tf.keras.layers.Dense(10),\n",
    "    ]\n",
    ")\n",
    "\n",
    "train(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_output(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the spike rates have moved towards the 10Hz target we specified. However, the test accuracy has dropped, since we're adding an additional optimization constraint. Again this is a tradeoff that is made between controlling the firing rates and optimizing accuracy, and the best value for that tradeoff will depend on the particular application (e.g., how important is it that spike rates fall within a particular range?)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lowpass filtering\n",
    "\n",
    "Another tool we can employ when working with SpikingActivation layers is filtering. As we've seen, the output of a spiking layer consists of discrete, temporally sparse spike events. This makes it difficult to determine the spike rate of a neuron when just looking at a single timestep. For example, in the cases above we are only using the output on the final timestep to compute the test accuracy. But it's possible that a neuron that actually has a low spike rate just happened to spike on that final timestep, throwing off our measured results.\n",
    "\n",
    "It seems natural then, rather than just looking at a single timestep, to compute some kind of moving average of the spiking output across timesteps. This is effectively what filtering is doing. Keras Spiking contains a Lowpass layer, which implements a [lowpass filter](https://en.wikipedia.org/wiki/Low-pass_filter). This has a parameter `tau`, known as the filter time constant, which controls the degree of smoothing the layer will apply. Larger `tau` values will apply more smoothing, meaning that we're aggregating information across longer periods of time, but the output will also be slower to adapt to changes in the input.\n",
    "\n",
    "By default the `tau` values are trainable. We can use this in combination with spiking aware training to enable the model to learn time constants that best trade off spike noise versus response speed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = tf.keras.Sequential(\n",
    "    [\n",
    "        tf.keras.layers.Reshape((-1, 28 * 28), input_shape=(None, 28, 28)),\n",
    "        tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(128)),\n",
    "        # we'll use a smaller dt value of 0.01\n",
    "        # note: we set return_sequences=True, because we want to pass the whole sequence\n",
    "        # of spikes to Lowpass to be filtered\n",
    "        keras_spiking.SpikingActivation(\n",
    "            \"relu\", return_sequences=True, spiking_aware_training=True, dt=0.01\n",
    "        ),\n",
    "        # add a lowpass filter on output of spiking layer\n",
    "        # note: the lowpass dt doesn't necessarily need to be the same as the\n",
    "        # SpikingActivation dt, but it's probably a good idea to keep them in sync\n",
    "        # so that if we change dt the relative effect of the lowpass filter is unchanged\n",
    "        keras_spiking.Lowpass(tau=0.1, dt=0.01),\n",
    "        tf.keras.layers.Dense(10),\n",
    "    ]\n",
    ")\n",
    "\n",
    "train(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check_output(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that we are getting roughly equivalent performance to the previous [spiking aware training](#Spiking-aware-training) example, but with much fewer spikes (because we're using 1/10th the dt). That is, we can be more aggressive in our temporal sparsification, because we're using the Lowpass filtering to aggregate information over time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "We can use `SpikingActivation` layers to convert any activation function to an equivalent spiking implementation. Models with SpikingActivations can be trained and evaluated in the same way as non-spiking models, thanks to the swappable training/inference behaviour.\n",
    "\n",
    "There are also a number of additional features that should be kept in mind in order to optimize the performance of a spiking model:\n",
    "\n",
    "- [Simulation time](#Simulation-time): by adjusting `dt` we can trade off temporal sparsity versus accuracy\n",
    "- [Spiking aware training](#Spiking-aware-training): incorporating spiking dynamics on the forward pass can allow the model to learn weights that are more robust to spiking activations\n",
    "- [Spike rate regularization](#Spike-rate-regularization): we can gain more control over spike rates by directly incorporating activity regularization into the optimization process\n",
    "- [Lowpass filtering](#Lowpass-filtering): we can achieve better accuracy with fewer spikes by aggregating spike data over time"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python",
   "pygments_lexer": "ipython3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
